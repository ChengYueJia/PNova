use ark_crypto_primitives::sponge::poseidon::PoseidonConfig;
use ark_ff::{fields::models::*, Field, PrimeField};
use ark_std::{vec, vec::Vec, Zero};

use crate::bn254::Bn254FqConfig;
use crate::grain_lfsr::PoseidonGrainLFSR;

type Bn254Fq = Fp256<Bn254FqConfig>;

pub trait OptimizedPoseidonConfig: Sized + PrimeField {
    fn get_optimized_poseidon_config(
        self,
        rate: usize,
        alpha: usize,
        full_rounds: usize,
        partial_rounds: usize,
        skip_matrices: usize,
    ) -> Option<PoseidonConfig<Self>>;
}

impl OptimizedPoseidonConfig for Bn254Fq {
    fn get_optimized_poseidon_config(
        self,
        rate: usize,
        alpha: usize,
        full_rounds: usize,
        partial_rounds: usize,
        skip_matrices: usize,
    ) -> Option<PoseidonConfig<Self>> {
        let mut lfsr = PoseidonGrainLFSR::new(
            false,
            Self::MODULUS_BIT_SIZE as u64,
            (rate + 1) as u64,
            full_rounds as u64,
            partial_rounds as u64,
        );

        let mut ark = Vec::<Vec<Self>>::with_capacity((full_rounds + partial_rounds) as usize);
        for _ in 0..(full_rounds + partial_rounds) {
            ark.push(lfsr.get_field_elements_rejection_sampling(rate + 1));
        }

        let mut mds = Vec::<Vec<Self>>::with_capacity(rate + 1);
        mds.resize(rate + 1, vec![Self::zero(); rate + 1]);
        for _ in 0..skip_matrices {
            let _ = lfsr.get_field_elements_mod_p::<Self>(2 * (rate + 1));
        }

        // a qualifying matrix must satisfy the following requirements
        // - there is no duplication among the elements in x or y
        // - there is no i and j such that x[i] + y[j] = p
        // - the resultant MDS passes all the three tests

        let xs = lfsr.get_field_elements_mod_p::<Self>(rate + 1);
        let ys = lfsr.get_field_elements_mod_p::<Self>(rate + 1);

        for i in 0..(rate + 1) {
            for j in 0..(rate + 1) {
                mds[i][j] = (xs[i] + &ys[j]).inverse().unwrap();
            }
        }
        return Some(PoseidonConfig {
            full_rounds: full_rounds,
            partial_rounds: partial_rounds,
            alpha: alpha as u64,
            ark,
            mds,
            rate: rate,
            capacity: 1,
        });
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_poseidon_config() {}
}
